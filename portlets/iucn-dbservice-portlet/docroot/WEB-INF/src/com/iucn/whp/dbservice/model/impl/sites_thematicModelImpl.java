/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.iucn.whp.dbservice.model.impl;

import com.iucn.whp.dbservice.model.sites_thematic;
import com.iucn.whp.dbservice.model.sites_thematicModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the sites_thematic service. Represents a row in the &quot;whp_sites_thematic&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.iucn.whp.dbservice.model.sites_thematicModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link sites_thematicImpl}.
 * </p>
 *
 * @author alok.sen
 * @see sites_thematicImpl
 * @see com.iucn.whp.dbservice.model.sites_thematic
 * @see com.iucn.whp.dbservice.model.sites_thematicModel
 * @generated
 */
public class sites_thematicModelImpl extends BaseModelImpl<sites_thematic>
	implements sites_thematicModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sites_thematic model instance should use the {@link com.iucn.whp.dbservice.model.sites_thematic} interface instead.
	 */
	public static final String TABLE_NAME = "whp_sites_thematic";
	public static final Object[][] TABLE_COLUMNS = {
			{ "sitethematicid", Types.BIGINT },
			{ "site_id", Types.BIGINT },
			{ "thematicid", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table whp_sites_thematic (sitethematicid LONG not null primary key,site_id LONG,thematicid LONG)";
	public static final String TABLE_SQL_DROP = "drop table whp_sites_thematic";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.iucn.whp.dbservice.model.sites_thematic"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.iucn.whp.dbservice.model.sites_thematic"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.iucn.whp.dbservice.model.sites_thematic"),
			true);
	public static long SITE_ID_COLUMN_BITMASK = 1L;
	public static long THEMATICID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.iucn.whp.dbservice.model.sites_thematic"));

	public sites_thematicModelImpl() {
	}

	public long getPrimaryKey() {
		return _sitethematicid;
	}

	public void setPrimaryKey(long primaryKey) {
		setSitethematicid(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_sitethematicid);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return sites_thematic.class;
	}

	public String getModelClassName() {
		return sites_thematic.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("sitethematicid", getSitethematicid());
		attributes.put("site_id", getSite_id());
		attributes.put("thematicid", getThematicid());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long sitethematicid = (Long)attributes.get("sitethematicid");

		if (sitethematicid != null) {
			setSitethematicid(sitethematicid);
		}

		Long site_id = (Long)attributes.get("site_id");

		if (site_id != null) {
			setSite_id(site_id);
		}

		Long thematicid = (Long)attributes.get("thematicid");

		if (thematicid != null) {
			setThematicid(thematicid);
		}
	}

	public long getSitethematicid() {
		return _sitethematicid;
	}

	public void setSitethematicid(long sitethematicid) {
		_sitethematicid = sitethematicid;
	}

	public long getSite_id() {
		return _site_id;
	}

	public void setSite_id(long site_id) {
		_columnBitmask |= SITE_ID_COLUMN_BITMASK;

		if (!_setOriginalSite_id) {
			_setOriginalSite_id = true;

			_originalSite_id = _site_id;
		}

		_site_id = site_id;
	}

	public long getOriginalSite_id() {
		return _originalSite_id;
	}

	public long getThematicid() {
		return _thematicid;
	}

	public void setThematicid(long thematicid) {
		_columnBitmask |= THEMATICID_COLUMN_BITMASK;

		if (!_setOriginalThematicid) {
			_setOriginalThematicid = true;

			_originalThematicid = _thematicid;
		}

		_thematicid = thematicid;
	}

	public long getOriginalThematicid() {
		return _originalThematicid;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			sites_thematic.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public sites_thematic toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (sites_thematic)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		sites_thematicImpl sites_thematicImpl = new sites_thematicImpl();

		sites_thematicImpl.setSitethematicid(getSitethematicid());
		sites_thematicImpl.setSite_id(getSite_id());
		sites_thematicImpl.setThematicid(getThematicid());

		sites_thematicImpl.resetOriginalValues();

		return sites_thematicImpl;
	}

	public int compareTo(sites_thematic sites_thematic) {
		long primaryKey = sites_thematic.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		sites_thematic sites_thematic = null;

		try {
			sites_thematic = (sites_thematic)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = sites_thematic.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		sites_thematicModelImpl sites_thematicModelImpl = this;

		sites_thematicModelImpl._originalSite_id = sites_thematicModelImpl._site_id;

		sites_thematicModelImpl._setOriginalSite_id = false;

		sites_thematicModelImpl._originalThematicid = sites_thematicModelImpl._thematicid;

		sites_thematicModelImpl._setOriginalThematicid = false;

		sites_thematicModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<sites_thematic> toCacheModel() {
		sites_thematicCacheModel sites_thematicCacheModel = new sites_thematicCacheModel();

		sites_thematicCacheModel.sitethematicid = getSitethematicid();

		sites_thematicCacheModel.site_id = getSite_id();

		sites_thematicCacheModel.thematicid = getThematicid();

		return sites_thematicCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{sitethematicid=");
		sb.append(getSitethematicid());
		sb.append(", site_id=");
		sb.append(getSite_id());
		sb.append(", thematicid=");
		sb.append(getThematicid());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.iucn.whp.dbservice.model.sites_thematic");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>sitethematicid</column-name><column-value><![CDATA[");
		sb.append(getSitethematicid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>site_id</column-name><column-value><![CDATA[");
		sb.append(getSite_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>thematicid</column-name><column-value><![CDATA[");
		sb.append(getThematicid());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = sites_thematic.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			sites_thematic.class
		};
	private long _sitethematicid;
	private long _site_id;
	private long _originalSite_id;
	private boolean _setOriginalSite_id;
	private long _thematicid;
	private long _originalThematicid;
	private boolean _setOriginalThematicid;
	private long _columnBitmask;
	private sites_thematic _escapedModelProxy;
}