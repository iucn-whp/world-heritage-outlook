/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.iucn.whp.dbservice.model.impl;

import com.iucn.whp.dbservice.model.docs_sitedata;
import com.iucn.whp.dbservice.model.docs_sitedataModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the docs_sitedata service. Represents a row in the &quot;whp_docs_sitedata&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.iucn.whp.dbservice.model.docs_sitedataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link docs_sitedataImpl}.
 * </p>
 *
 * @author alok.sen
 * @see docs_sitedataImpl
 * @see com.iucn.whp.dbservice.model.docs_sitedata
 * @see com.iucn.whp.dbservice.model.docs_sitedataModel
 * @generated
 */
public class docs_sitedataModelImpl extends BaseModelImpl<docs_sitedata>
	implements docs_sitedataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a docs_sitedata model instance should use the {@link com.iucn.whp.dbservice.model.docs_sitedata} interface instead.
	 */
	public static final String TABLE_NAME = "whp_docs_sitedata";
	public static final Object[][] TABLE_COLUMNS = {
			{ "docs_sitedataId", Types.BIGINT },
			{ "fileentryid", Types.BIGINT },
			{ "fileversionid", Types.BIGINT },
			{ "siteid", Types.BIGINT },
			{ "date_published", Types.TIMESTAMP },
			{ "doc_name", Types.VARCHAR },
			{ "document_link", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table whp_docs_sitedata (docs_sitedataId LONG not null primary key,fileentryid LONG,fileversionid LONG,siteid LONG,date_published DATE null,doc_name VARCHAR(500) null,document_link VARCHAR(1000) null)";
	public static final String TABLE_SQL_DROP = "drop table whp_docs_sitedata";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.iucn.whp.dbservice.model.docs_sitedata"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.iucn.whp.dbservice.model.docs_sitedata"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.iucn.whp.dbservice.model.docs_sitedata"),
			true);
	public static long FILEENTRYID_COLUMN_BITMASK = 1L;
	public static long SITEID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.iucn.whp.dbservice.model.docs_sitedata"));

	public docs_sitedataModelImpl() {
	}

	public long getPrimaryKey() {
		return _docs_sitedataId;
	}

	public void setPrimaryKey(long primaryKey) {
		setDocs_sitedataId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_docs_sitedataId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return docs_sitedata.class;
	}

	public String getModelClassName() {
		return docs_sitedata.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("docs_sitedataId", getDocs_sitedataId());
		attributes.put("fileentryid", getFileentryid());
		attributes.put("fileversionid", getFileversionid());
		attributes.put("siteid", getSiteid());
		attributes.put("date_published", getDate_published());
		attributes.put("doc_name", getDoc_name());
		attributes.put("document_link", getDocument_link());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long docs_sitedataId = (Long)attributes.get("docs_sitedataId");

		if (docs_sitedataId != null) {
			setDocs_sitedataId(docs_sitedataId);
		}

		Long fileentryid = (Long)attributes.get("fileentryid");

		if (fileentryid != null) {
			setFileentryid(fileentryid);
		}

		Long fileversionid = (Long)attributes.get("fileversionid");

		if (fileversionid != null) {
			setFileversionid(fileversionid);
		}

		Long siteid = (Long)attributes.get("siteid");

		if (siteid != null) {
			setSiteid(siteid);
		}

		Date date_published = (Date)attributes.get("date_published");

		if (date_published != null) {
			setDate_published(date_published);
		}

		String doc_name = (String)attributes.get("doc_name");

		if (doc_name != null) {
			setDoc_name(doc_name);
		}

		String document_link = (String)attributes.get("document_link");

		if (document_link != null) {
			setDocument_link(document_link);
		}
	}

	public long getDocs_sitedataId() {
		return _docs_sitedataId;
	}

	public void setDocs_sitedataId(long docs_sitedataId) {
		_docs_sitedataId = docs_sitedataId;
	}

	public long getFileentryid() {
		return _fileentryid;
	}

	public void setFileentryid(long fileentryid) {
		_columnBitmask |= FILEENTRYID_COLUMN_BITMASK;

		if (!_setOriginalFileentryid) {
			_setOriginalFileentryid = true;

			_originalFileentryid = _fileentryid;
		}

		_fileentryid = fileentryid;
	}

	public long getOriginalFileentryid() {
		return _originalFileentryid;
	}

	public long getFileversionid() {
		return _fileversionid;
	}

	public void setFileversionid(long fileversionid) {
		_fileversionid = fileversionid;
	}

	public long getSiteid() {
		return _siteid;
	}

	public void setSiteid(long siteid) {
		_columnBitmask |= SITEID_COLUMN_BITMASK;

		if (!_setOriginalSiteid) {
			_setOriginalSiteid = true;

			_originalSiteid = _siteid;
		}

		_siteid = siteid;
	}

	public long getOriginalSiteid() {
		return _originalSiteid;
	}

	public Date getDate_published() {
		return _date_published;
	}

	public void setDate_published(Date date_published) {
		_date_published = date_published;
	}

	public String getDoc_name() {
		if (_doc_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _doc_name;
		}
	}

	public void setDoc_name(String doc_name) {
		_doc_name = doc_name;
	}

	public String getDocument_link() {
		if (_document_link == null) {
			return StringPool.BLANK;
		}
		else {
			return _document_link;
		}
	}

	public void setDocument_link(String document_link) {
		_document_link = document_link;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			docs_sitedata.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public docs_sitedata toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (docs_sitedata)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		docs_sitedataImpl docs_sitedataImpl = new docs_sitedataImpl();

		docs_sitedataImpl.setDocs_sitedataId(getDocs_sitedataId());
		docs_sitedataImpl.setFileentryid(getFileentryid());
		docs_sitedataImpl.setFileversionid(getFileversionid());
		docs_sitedataImpl.setSiteid(getSiteid());
		docs_sitedataImpl.setDate_published(getDate_published());
		docs_sitedataImpl.setDoc_name(getDoc_name());
		docs_sitedataImpl.setDocument_link(getDocument_link());

		docs_sitedataImpl.resetOriginalValues();

		return docs_sitedataImpl;
	}

	public int compareTo(docs_sitedata docs_sitedata) {
		long primaryKey = docs_sitedata.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		docs_sitedata docs_sitedata = null;

		try {
			docs_sitedata = (docs_sitedata)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = docs_sitedata.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		docs_sitedataModelImpl docs_sitedataModelImpl = this;

		docs_sitedataModelImpl._originalFileentryid = docs_sitedataModelImpl._fileentryid;

		docs_sitedataModelImpl._setOriginalFileentryid = false;

		docs_sitedataModelImpl._originalSiteid = docs_sitedataModelImpl._siteid;

		docs_sitedataModelImpl._setOriginalSiteid = false;

		docs_sitedataModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<docs_sitedata> toCacheModel() {
		docs_sitedataCacheModel docs_sitedataCacheModel = new docs_sitedataCacheModel();

		docs_sitedataCacheModel.docs_sitedataId = getDocs_sitedataId();

		docs_sitedataCacheModel.fileentryid = getFileentryid();

		docs_sitedataCacheModel.fileversionid = getFileversionid();

		docs_sitedataCacheModel.siteid = getSiteid();

		Date date_published = getDate_published();

		if (date_published != null) {
			docs_sitedataCacheModel.date_published = date_published.getTime();
		}
		else {
			docs_sitedataCacheModel.date_published = Long.MIN_VALUE;
		}

		docs_sitedataCacheModel.doc_name = getDoc_name();

		String doc_name = docs_sitedataCacheModel.doc_name;

		if ((doc_name != null) && (doc_name.length() == 0)) {
			docs_sitedataCacheModel.doc_name = null;
		}

		docs_sitedataCacheModel.document_link = getDocument_link();

		String document_link = docs_sitedataCacheModel.document_link;

		if ((document_link != null) && (document_link.length() == 0)) {
			docs_sitedataCacheModel.document_link = null;
		}

		return docs_sitedataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{docs_sitedataId=");
		sb.append(getDocs_sitedataId());
		sb.append(", fileentryid=");
		sb.append(getFileentryid());
		sb.append(", fileversionid=");
		sb.append(getFileversionid());
		sb.append(", siteid=");
		sb.append(getSiteid());
		sb.append(", date_published=");
		sb.append(getDate_published());
		sb.append(", doc_name=");
		sb.append(getDoc_name());
		sb.append(", document_link=");
		sb.append(getDocument_link());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.iucn.whp.dbservice.model.docs_sitedata");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>docs_sitedataId</column-name><column-value><![CDATA[");
		sb.append(getDocs_sitedataId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileentryid</column-name><column-value><![CDATA[");
		sb.append(getFileentryid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileversionid</column-name><column-value><![CDATA[");
		sb.append(getFileversionid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>siteid</column-name><column-value><![CDATA[");
		sb.append(getSiteid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>date_published</column-name><column-value><![CDATA[");
		sb.append(getDate_published());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>doc_name</column-name><column-value><![CDATA[");
		sb.append(getDoc_name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>document_link</column-name><column-value><![CDATA[");
		sb.append(getDocument_link());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = docs_sitedata.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			docs_sitedata.class
		};
	private long _docs_sitedataId;
	private long _fileentryid;
	private long _originalFileentryid;
	private boolean _setOriginalFileentryid;
	private long _fileversionid;
	private long _siteid;
	private long _originalSiteid;
	private boolean _setOriginalSiteid;
	private Date _date_published;
	private String _doc_name;
	private String _document_link;
	private long _columnBitmask;
	private docs_sitedata _escapedModelProxy;
}