/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.iucn.whp.dbservice.model.impl;

import com.iucn.whp.dbservice.model.assessing_threats_current;
import com.iucn.whp.dbservice.model.assessing_threats_currentModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the assessing_threats_current service. Represents a row in the &quot;whp_assessing_threats_current&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.iucn.whp.dbservice.model.assessing_threats_currentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link assessing_threats_currentImpl}.
 * </p>
 *
 * @author alok.sen
 * @see assessing_threats_currentImpl
 * @see com.iucn.whp.dbservice.model.assessing_threats_current
 * @see com.iucn.whp.dbservice.model.assessing_threats_currentModel
 * @generated
 */
public class assessing_threats_currentModelImpl extends BaseModelImpl<assessing_threats_current>
	implements assessing_threats_currentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a assessing_threats_current model instance should use the {@link com.iucn.whp.dbservice.model.assessing_threats_current} interface instead.
	 */
	public static final String TABLE_NAME = "whp_assessing_threats_current";
	public static final Object[][] TABLE_COLUMNS = {
			{ "current_threat_id", Types.BIGINT },
			{ "assessment_version_id", Types.BIGINT },
			{ "current_threat", Types.VARCHAR },
			{ "justification", Types.VARCHAR },
			{ "threadExtentValue", Types.VARCHAR },
			{ "inside_site", Types.BOOLEAN },
			{ "outside_site", Types.BOOLEAN },
			{ "threat_rating_id", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table whp_assessing_threats_current (current_threat_id LONG not null primary key,assessment_version_id LONG,current_threat STRING null,justification STRING null,threadExtentValue VARCHAR(100) null,inside_site BOOLEAN,outside_site BOOLEAN,threat_rating_id LONG)";
	public static final String TABLE_SQL_DROP = "drop table whp_assessing_threats_current";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.iucn.whp.dbservice.model.assessing_threats_current"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.iucn.whp.dbservice.model.assessing_threats_current"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.iucn.whp.dbservice.model.assessing_threats_current"),
			true);
	public static long ASSESSMENT_VERSION_ID_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.iucn.whp.dbservice.model.assessing_threats_current"));

	public assessing_threats_currentModelImpl() {
	}

	public long getPrimaryKey() {
		return _current_threat_id;
	}

	public void setPrimaryKey(long primaryKey) {
		setCurrent_threat_id(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_current_threat_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return assessing_threats_current.class;
	}

	public String getModelClassName() {
		return assessing_threats_current.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("current_threat_id", getCurrent_threat_id());
		attributes.put("assessment_version_id", getAssessment_version_id());
		attributes.put("current_threat", getCurrent_threat());
		attributes.put("justification", getJustification());
		attributes.put("threadExtentValue", getThreadExtentValue());
		attributes.put("inside_site", getInside_site());
		attributes.put("outside_site", getOutside_site());
		attributes.put("threat_rating_id", getThreat_rating_id());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long current_threat_id = (Long)attributes.get("current_threat_id");

		if (current_threat_id != null) {
			setCurrent_threat_id(current_threat_id);
		}

		Long assessment_version_id = (Long)attributes.get(
				"assessment_version_id");

		if (assessment_version_id != null) {
			setAssessment_version_id(assessment_version_id);
		}

		String current_threat = (String)attributes.get("current_threat");

		if (current_threat != null) {
			setCurrent_threat(current_threat);
		}

		String justification = (String)attributes.get("justification");

		if (justification != null) {
			setJustification(justification);
		}

		String threadExtentValue = (String)attributes.get("threadExtentValue");

		if (threadExtentValue != null) {
			setThreadExtentValue(threadExtentValue);
		}

		Boolean inside_site = (Boolean)attributes.get("inside_site");

		if (inside_site != null) {
			setInside_site(inside_site);
		}

		Boolean outside_site = (Boolean)attributes.get("outside_site");

		if (outside_site != null) {
			setOutside_site(outside_site);
		}

		Long threat_rating_id = (Long)attributes.get("threat_rating_id");

		if (threat_rating_id != null) {
			setThreat_rating_id(threat_rating_id);
		}
	}

	public long getCurrent_threat_id() {
		return _current_threat_id;
	}

	public void setCurrent_threat_id(long current_threat_id) {
		_current_threat_id = current_threat_id;
	}

	public long getAssessment_version_id() {
		return _assessment_version_id;
	}

	public void setAssessment_version_id(long assessment_version_id) {
		_columnBitmask |= ASSESSMENT_VERSION_ID_COLUMN_BITMASK;

		if (!_setOriginalAssessment_version_id) {
			_setOriginalAssessment_version_id = true;

			_originalAssessment_version_id = _assessment_version_id;
		}

		_assessment_version_id = assessment_version_id;
	}

	public long getOriginalAssessment_version_id() {
		return _originalAssessment_version_id;
	}

	public String getCurrent_threat() {
		if (_current_threat == null) {
			return StringPool.BLANK;
		}
		else {
			return _current_threat;
		}
	}

	public void setCurrent_threat(String current_threat) {
		_current_threat = current_threat;
	}

	public String getJustification() {
		if (_justification == null) {
			return StringPool.BLANK;
		}
		else {
			return _justification;
		}
	}

	public void setJustification(String justification) {
		_justification = justification;
	}

	public String getThreadExtentValue() {
		if (_threadExtentValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _threadExtentValue;
		}
	}

	public void setThreadExtentValue(String threadExtentValue) {
		_threadExtentValue = threadExtentValue;
	}

	public boolean getInside_site() {
		return _inside_site;
	}

	public boolean isInside_site() {
		return _inside_site;
	}

	public void setInside_site(boolean inside_site) {
		_inside_site = inside_site;
	}

	public boolean getOutside_site() {
		return _outside_site;
	}

	public boolean isOutside_site() {
		return _outside_site;
	}

	public void setOutside_site(boolean outside_site) {
		_outside_site = outside_site;
	}

	public long getThreat_rating_id() {
		return _threat_rating_id;
	}

	public void setThreat_rating_id(long threat_rating_id) {
		_threat_rating_id = threat_rating_id;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			assessing_threats_current.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public assessing_threats_current toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (assessing_threats_current)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		assessing_threats_currentImpl assessing_threats_currentImpl = new assessing_threats_currentImpl();

		assessing_threats_currentImpl.setCurrent_threat_id(getCurrent_threat_id());
		assessing_threats_currentImpl.setAssessment_version_id(getAssessment_version_id());
		assessing_threats_currentImpl.setCurrent_threat(getCurrent_threat());
		assessing_threats_currentImpl.setJustification(getJustification());
		assessing_threats_currentImpl.setThreadExtentValue(getThreadExtentValue());
		assessing_threats_currentImpl.setInside_site(getInside_site());
		assessing_threats_currentImpl.setOutside_site(getOutside_site());
		assessing_threats_currentImpl.setThreat_rating_id(getThreat_rating_id());

		assessing_threats_currentImpl.resetOriginalValues();

		return assessing_threats_currentImpl;
	}

	public int compareTo(assessing_threats_current assessing_threats_current) {
		long primaryKey = assessing_threats_current.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		assessing_threats_current assessing_threats_current = null;

		try {
			assessing_threats_current = (assessing_threats_current)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = assessing_threats_current.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		assessing_threats_currentModelImpl assessing_threats_currentModelImpl = this;

		assessing_threats_currentModelImpl._originalAssessment_version_id = assessing_threats_currentModelImpl._assessment_version_id;

		assessing_threats_currentModelImpl._setOriginalAssessment_version_id = false;

		assessing_threats_currentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<assessing_threats_current> toCacheModel() {
		assessing_threats_currentCacheModel assessing_threats_currentCacheModel = new assessing_threats_currentCacheModel();

		assessing_threats_currentCacheModel.current_threat_id = getCurrent_threat_id();

		assessing_threats_currentCacheModel.assessment_version_id = getAssessment_version_id();

		assessing_threats_currentCacheModel.current_threat = getCurrent_threat();

		String current_threat = assessing_threats_currentCacheModel.current_threat;

		if ((current_threat != null) && (current_threat.length() == 0)) {
			assessing_threats_currentCacheModel.current_threat = null;
		}

		assessing_threats_currentCacheModel.justification = getJustification();

		String justification = assessing_threats_currentCacheModel.justification;

		if ((justification != null) && (justification.length() == 0)) {
			assessing_threats_currentCacheModel.justification = null;
		}

		assessing_threats_currentCacheModel.threadExtentValue = getThreadExtentValue();

		String threadExtentValue = assessing_threats_currentCacheModel.threadExtentValue;

		if ((threadExtentValue != null) && (threadExtentValue.length() == 0)) {
			assessing_threats_currentCacheModel.threadExtentValue = null;
		}

		assessing_threats_currentCacheModel.inside_site = getInside_site();

		assessing_threats_currentCacheModel.outside_site = getOutside_site();

		assessing_threats_currentCacheModel.threat_rating_id = getThreat_rating_id();

		return assessing_threats_currentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{current_threat_id=");
		sb.append(getCurrent_threat_id());
		sb.append(", assessment_version_id=");
		sb.append(getAssessment_version_id());
		sb.append(", current_threat=");
		sb.append(getCurrent_threat());
		sb.append(", justification=");
		sb.append(getJustification());
		sb.append(", threadExtentValue=");
		sb.append(getThreadExtentValue());
		sb.append(", inside_site=");
		sb.append(getInside_site());
		sb.append(", outside_site=");
		sb.append(getOutside_site());
		sb.append(", threat_rating_id=");
		sb.append(getThreat_rating_id());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.iucn.whp.dbservice.model.assessing_threats_current");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>current_threat_id</column-name><column-value><![CDATA[");
		sb.append(getCurrent_threat_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assessment_version_id</column-name><column-value><![CDATA[");
		sb.append(getAssessment_version_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>current_threat</column-name><column-value><![CDATA[");
		sb.append(getCurrent_threat());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>justification</column-name><column-value><![CDATA[");
		sb.append(getJustification());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>threadExtentValue</column-name><column-value><![CDATA[");
		sb.append(getThreadExtentValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inside_site</column-name><column-value><![CDATA[");
		sb.append(getInside_site());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>outside_site</column-name><column-value><![CDATA[");
		sb.append(getOutside_site());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>threat_rating_id</column-name><column-value><![CDATA[");
		sb.append(getThreat_rating_id());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = assessing_threats_current.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			assessing_threats_current.class
		};
	private long _current_threat_id;
	private long _assessment_version_id;
	private long _originalAssessment_version_id;
	private boolean _setOriginalAssessment_version_id;
	private String _current_threat;
	private String _justification;
	private String _threadExtentValue;
	private boolean _inside_site;
	private boolean _outside_site;
	private long _threat_rating_id;
	private long _columnBitmask;
	private assessing_threats_current _escapedModelProxy;
}