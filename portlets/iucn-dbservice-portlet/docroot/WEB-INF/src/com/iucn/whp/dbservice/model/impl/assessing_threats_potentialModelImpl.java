/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.iucn.whp.dbservice.model.impl;

import com.iucn.whp.dbservice.model.assessing_threats_potential;
import com.iucn.whp.dbservice.model.assessing_threats_potentialModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the assessing_threats_potential service. Represents a row in the &quot;whp_assessing_threats_potential&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.iucn.whp.dbservice.model.assessing_threats_potentialModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link assessing_threats_potentialImpl}.
 * </p>
 *
 * @author alok.sen
 * @see assessing_threats_potentialImpl
 * @see com.iucn.whp.dbservice.model.assessing_threats_potential
 * @see com.iucn.whp.dbservice.model.assessing_threats_potentialModel
 * @generated
 */
public class assessing_threats_potentialModelImpl extends BaseModelImpl<assessing_threats_potential>
	implements assessing_threats_potentialModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a assessing_threats_potential model instance should use the {@link com.iucn.whp.dbservice.model.assessing_threats_potential} interface instead.
	 */
	public static final String TABLE_NAME = "whp_assessing_threats_potential";
	public static final Object[][] TABLE_COLUMNS = {
			{ "potential_threat_id", Types.BIGINT },
			{ "assessment_version_id", Types.BIGINT },
			{ "potential_threat", Types.VARCHAR },
			{ "justification", Types.VARCHAR },
			{ "threat_rating", Types.BIGINT },
			{ "inside_site", Types.BOOLEAN },
			{ "outside_site", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table whp_assessing_threats_potential (potential_threat_id LONG not null primary key,assessment_version_id LONG,potential_threat STRING null,justification STRING null,threat_rating LONG,inside_site BOOLEAN,outside_site BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table whp_assessing_threats_potential";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.iucn.whp.dbservice.model.assessing_threats_potential"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.iucn.whp.dbservice.model.assessing_threats_potential"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.iucn.whp.dbservice.model.assessing_threats_potential"),
			true);
	public static long ASSESSMENT_VERSION_ID_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.iucn.whp.dbservice.model.assessing_threats_potential"));

	public assessing_threats_potentialModelImpl() {
	}

	public long getPrimaryKey() {
		return _potential_threat_id;
	}

	public void setPrimaryKey(long primaryKey) {
		setPotential_threat_id(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_potential_threat_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return assessing_threats_potential.class;
	}

	public String getModelClassName() {
		return assessing_threats_potential.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("potential_threat_id", getPotential_threat_id());
		attributes.put("assessment_version_id", getAssessment_version_id());
		attributes.put("potential_threat", getPotential_threat());
		attributes.put("justification", getJustification());
		attributes.put("threat_rating", getThreat_rating());
		attributes.put("inside_site", getInside_site());
		attributes.put("outside_site", getOutside_site());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long potential_threat_id = (Long)attributes.get("potential_threat_id");

		if (potential_threat_id != null) {
			setPotential_threat_id(potential_threat_id);
		}

		Long assessment_version_id = (Long)attributes.get(
				"assessment_version_id");

		if (assessment_version_id != null) {
			setAssessment_version_id(assessment_version_id);
		}

		String potential_threat = (String)attributes.get("potential_threat");

		if (potential_threat != null) {
			setPotential_threat(potential_threat);
		}

		String justification = (String)attributes.get("justification");

		if (justification != null) {
			setJustification(justification);
		}

		Long threat_rating = (Long)attributes.get("threat_rating");

		if (threat_rating != null) {
			setThreat_rating(threat_rating);
		}

		Boolean inside_site = (Boolean)attributes.get("inside_site");

		if (inside_site != null) {
			setInside_site(inside_site);
		}

		Boolean outside_site = (Boolean)attributes.get("outside_site");

		if (outside_site != null) {
			setOutside_site(outside_site);
		}
	}

	public long getPotential_threat_id() {
		return _potential_threat_id;
	}

	public void setPotential_threat_id(long potential_threat_id) {
		_potential_threat_id = potential_threat_id;
	}

	public long getAssessment_version_id() {
		return _assessment_version_id;
	}

	public void setAssessment_version_id(long assessment_version_id) {
		_columnBitmask |= ASSESSMENT_VERSION_ID_COLUMN_BITMASK;

		if (!_setOriginalAssessment_version_id) {
			_setOriginalAssessment_version_id = true;

			_originalAssessment_version_id = _assessment_version_id;
		}

		_assessment_version_id = assessment_version_id;
	}

	public long getOriginalAssessment_version_id() {
		return _originalAssessment_version_id;
	}

	public String getPotential_threat() {
		if (_potential_threat == null) {
			return StringPool.BLANK;
		}
		else {
			return _potential_threat;
		}
	}

	public void setPotential_threat(String potential_threat) {
		_potential_threat = potential_threat;
	}

	public String getJustification() {
		if (_justification == null) {
			return StringPool.BLANK;
		}
		else {
			return _justification;
		}
	}

	public void setJustification(String justification) {
		_justification = justification;
	}

	public long getThreat_rating() {
		return _threat_rating;
	}

	public void setThreat_rating(long threat_rating) {
		_threat_rating = threat_rating;
	}

	public boolean getInside_site() {
		return _inside_site;
	}

	public boolean isInside_site() {
		return _inside_site;
	}

	public void setInside_site(boolean inside_site) {
		_inside_site = inside_site;
	}

	public boolean getOutside_site() {
		return _outside_site;
	}

	public boolean isOutside_site() {
		return _outside_site;
	}

	public void setOutside_site(boolean outside_site) {
		_outside_site = outside_site;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			assessing_threats_potential.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public assessing_threats_potential toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (assessing_threats_potential)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		assessing_threats_potentialImpl assessing_threats_potentialImpl = new assessing_threats_potentialImpl();

		assessing_threats_potentialImpl.setPotential_threat_id(getPotential_threat_id());
		assessing_threats_potentialImpl.setAssessment_version_id(getAssessment_version_id());
		assessing_threats_potentialImpl.setPotential_threat(getPotential_threat());
		assessing_threats_potentialImpl.setJustification(getJustification());
		assessing_threats_potentialImpl.setThreat_rating(getThreat_rating());
		assessing_threats_potentialImpl.setInside_site(getInside_site());
		assessing_threats_potentialImpl.setOutside_site(getOutside_site());

		assessing_threats_potentialImpl.resetOriginalValues();

		return assessing_threats_potentialImpl;
	}

	public int compareTo(
		assessing_threats_potential assessing_threats_potential) {
		long primaryKey = assessing_threats_potential.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		assessing_threats_potential assessing_threats_potential = null;

		try {
			assessing_threats_potential = (assessing_threats_potential)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = assessing_threats_potential.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		assessing_threats_potentialModelImpl assessing_threats_potentialModelImpl =
			this;

		assessing_threats_potentialModelImpl._originalAssessment_version_id = assessing_threats_potentialModelImpl._assessment_version_id;

		assessing_threats_potentialModelImpl._setOriginalAssessment_version_id = false;

		assessing_threats_potentialModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<assessing_threats_potential> toCacheModel() {
		assessing_threats_potentialCacheModel assessing_threats_potentialCacheModel =
			new assessing_threats_potentialCacheModel();

		assessing_threats_potentialCacheModel.potential_threat_id = getPotential_threat_id();

		assessing_threats_potentialCacheModel.assessment_version_id = getAssessment_version_id();

		assessing_threats_potentialCacheModel.potential_threat = getPotential_threat();

		String potential_threat = assessing_threats_potentialCacheModel.potential_threat;

		if ((potential_threat != null) && (potential_threat.length() == 0)) {
			assessing_threats_potentialCacheModel.potential_threat = null;
		}

		assessing_threats_potentialCacheModel.justification = getJustification();

		String justification = assessing_threats_potentialCacheModel.justification;

		if ((justification != null) && (justification.length() == 0)) {
			assessing_threats_potentialCacheModel.justification = null;
		}

		assessing_threats_potentialCacheModel.threat_rating = getThreat_rating();

		assessing_threats_potentialCacheModel.inside_site = getInside_site();

		assessing_threats_potentialCacheModel.outside_site = getOutside_site();

		return assessing_threats_potentialCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{potential_threat_id=");
		sb.append(getPotential_threat_id());
		sb.append(", assessment_version_id=");
		sb.append(getAssessment_version_id());
		sb.append(", potential_threat=");
		sb.append(getPotential_threat());
		sb.append(", justification=");
		sb.append(getJustification());
		sb.append(", threat_rating=");
		sb.append(getThreat_rating());
		sb.append(", inside_site=");
		sb.append(getInside_site());
		sb.append(", outside_site=");
		sb.append(getOutside_site());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.iucn.whp.dbservice.model.assessing_threats_potential");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>potential_threat_id</column-name><column-value><![CDATA[");
		sb.append(getPotential_threat_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assessment_version_id</column-name><column-value><![CDATA[");
		sb.append(getAssessment_version_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>potential_threat</column-name><column-value><![CDATA[");
		sb.append(getPotential_threat());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>justification</column-name><column-value><![CDATA[");
		sb.append(getJustification());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>threat_rating</column-name><column-value><![CDATA[");
		sb.append(getThreat_rating());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inside_site</column-name><column-value><![CDATA[");
		sb.append(getInside_site());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>outside_site</column-name><column-value><![CDATA[");
		sb.append(getOutside_site());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = assessing_threats_potential.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			assessing_threats_potential.class
		};
	private long _potential_threat_id;
	private long _assessment_version_id;
	private long _originalAssessment_version_id;
	private boolean _setOriginalAssessment_version_id;
	private String _potential_threat;
	private String _justification;
	private long _threat_rating;
	private boolean _inside_site;
	private boolean _outside_site;
	private long _columnBitmask;
	private assessing_threats_potential _escapedModelProxy;
}