/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.iucn.whp.dbservice.model.impl;

import com.iucn.whp.dbservice.model.recommendation_type_lkp;
import com.iucn.whp.dbservice.model.recommendation_type_lkpModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the recommendation_type_lkp service. Represents a row in the &quot;whp_recommendation_type_lkp&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.iucn.whp.dbservice.model.recommendation_type_lkpModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link recommendation_type_lkpImpl}.
 * </p>
 *
 * @author alok.sen
 * @see recommendation_type_lkpImpl
 * @see com.iucn.whp.dbservice.model.recommendation_type_lkp
 * @see com.iucn.whp.dbservice.model.recommendation_type_lkpModel
 * @generated
 */
public class recommendation_type_lkpModelImpl extends BaseModelImpl<recommendation_type_lkp>
	implements recommendation_type_lkpModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a recommendation_type_lkp model instance should use the {@link com.iucn.whp.dbservice.model.recommendation_type_lkp} interface instead.
	 */
	public static final String TABLE_NAME = "whp_recommendation_type_lkp";
	public static final Object[][] TABLE_COLUMNS = {
			{ "rec_type_id", Types.INTEGER },
			{ "recommendation", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table whp_recommendation_type_lkp (rec_type_id INTEGER not null primary key,recommendation VARCHAR(50) null)";
	public static final String TABLE_SQL_DROP = "drop table whp_recommendation_type_lkp";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.iucn.whp.dbservice.model.recommendation_type_lkp"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.iucn.whp.dbservice.model.recommendation_type_lkp"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.iucn.whp.dbservice.model.recommendation_type_lkp"));

	public recommendation_type_lkpModelImpl() {
	}

	public int getPrimaryKey() {
		return _rec_type_id;
	}

	public void setPrimaryKey(int primaryKey) {
		setRec_type_id(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Integer(_rec_type_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	public Class<?> getModelClass() {
		return recommendation_type_lkp.class;
	}

	public String getModelClassName() {
		return recommendation_type_lkp.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("rec_type_id", getRec_type_id());
		attributes.put("recommendation", getRecommendation());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer rec_type_id = (Integer)attributes.get("rec_type_id");

		if (rec_type_id != null) {
			setRec_type_id(rec_type_id);
		}

		String recommendation = (String)attributes.get("recommendation");

		if (recommendation != null) {
			setRecommendation(recommendation);
		}
	}

	public int getRec_type_id() {
		return _rec_type_id;
	}

	public void setRec_type_id(int rec_type_id) {
		_rec_type_id = rec_type_id;
	}

	public String getRecommendation() {
		if (_recommendation == null) {
			return StringPool.BLANK;
		}
		else {
			return _recommendation;
		}
	}

	public void setRecommendation(String recommendation) {
		_recommendation = recommendation;
	}

	@Override
	public recommendation_type_lkp toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (recommendation_type_lkp)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		recommendation_type_lkpImpl recommendation_type_lkpImpl = new recommendation_type_lkpImpl();

		recommendation_type_lkpImpl.setRec_type_id(getRec_type_id());
		recommendation_type_lkpImpl.setRecommendation(getRecommendation());

		recommendation_type_lkpImpl.resetOriginalValues();

		return recommendation_type_lkpImpl;
	}

	public int compareTo(recommendation_type_lkp recommendation_type_lkp) {
		int primaryKey = recommendation_type_lkp.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		recommendation_type_lkp recommendation_type_lkp = null;

		try {
			recommendation_type_lkp = (recommendation_type_lkp)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		int primaryKey = recommendation_type_lkp.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<recommendation_type_lkp> toCacheModel() {
		recommendation_type_lkpCacheModel recommendation_type_lkpCacheModel = new recommendation_type_lkpCacheModel();

		recommendation_type_lkpCacheModel.rec_type_id = getRec_type_id();

		recommendation_type_lkpCacheModel.recommendation = getRecommendation();

		String recommendation = recommendation_type_lkpCacheModel.recommendation;

		if ((recommendation != null) && (recommendation.length() == 0)) {
			recommendation_type_lkpCacheModel.recommendation = null;
		}

		return recommendation_type_lkpCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{rec_type_id=");
		sb.append(getRec_type_id());
		sb.append(", recommendation=");
		sb.append(getRecommendation());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.iucn.whp.dbservice.model.recommendation_type_lkp");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>rec_type_id</column-name><column-value><![CDATA[");
		sb.append(getRec_type_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recommendation</column-name><column-value><![CDATA[");
		sb.append(getRecommendation());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = recommendation_type_lkp.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			recommendation_type_lkp.class
		};
	private int _rec_type_id;
	private String _recommendation;
	private recommendation_type_lkp _escapedModelProxy;
}