/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.iucn.whp.dbservice.model.impl;

import com.iucn.whp.dbservice.model.assessment_lang_lkp;
import com.iucn.whp.dbservice.model.assessment_lang_lkpModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the assessment_lang_lkp service. Represents a row in the &quot;whp_assessment_lang_lkp&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.iucn.whp.dbservice.model.assessment_lang_lkpModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link assessment_lang_lkpImpl}.
 * </p>
 *
 * @author alok.sen
 * @see assessment_lang_lkpImpl
 * @see com.iucn.whp.dbservice.model.assessment_lang_lkp
 * @see com.iucn.whp.dbservice.model.assessment_lang_lkpModel
 * @generated
 */
public class assessment_lang_lkpModelImpl extends BaseModelImpl<assessment_lang_lkp>
	implements assessment_lang_lkpModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a assessment_lang_lkp model instance should use the {@link com.iucn.whp.dbservice.model.assessment_lang_lkp} interface instead.
	 */
	public static final String TABLE_NAME = "whp_assessment_lang_lkp";
	public static final Object[][] TABLE_COLUMNS = {
			{ "languageid", Types.BIGINT },
			{ "languagecode", Types.VARCHAR },
			{ "languagename", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table whp_assessment_lang_lkp (languageid LONG not null primary key,languagecode VARCHAR(3) null,languagename VARCHAR(20) null)";
	public static final String TABLE_SQL_DROP = "drop table whp_assessment_lang_lkp";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.iucn.whp.dbservice.model.assessment_lang_lkp"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.iucn.whp.dbservice.model.assessment_lang_lkp"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.iucn.whp.dbservice.model.assessment_lang_lkp"));

	public assessment_lang_lkpModelImpl() {
	}

	public long getPrimaryKey() {
		return _languageid;
	}

	public void setPrimaryKey(long primaryKey) {
		setLanguageid(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_languageid);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return assessment_lang_lkp.class;
	}

	public String getModelClassName() {
		return assessment_lang_lkp.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("languageid", getLanguageid());
		attributes.put("languagecode", getLanguagecode());
		attributes.put("languagename", getLanguagename());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long languageid = (Long)attributes.get("languageid");

		if (languageid != null) {
			setLanguageid(languageid);
		}

		String languagecode = (String)attributes.get("languagecode");

		if (languagecode != null) {
			setLanguagecode(languagecode);
		}

		String languagename = (String)attributes.get("languagename");

		if (languagename != null) {
			setLanguagename(languagename);
		}
	}

	public long getLanguageid() {
		return _languageid;
	}

	public void setLanguageid(long languageid) {
		_languageid = languageid;
	}

	public String getLanguagecode() {
		if (_languagecode == null) {
			return StringPool.BLANK;
		}
		else {
			return _languagecode;
		}
	}

	public void setLanguagecode(String languagecode) {
		_languagecode = languagecode;
	}

	public String getLanguagename() {
		if (_languagename == null) {
			return StringPool.BLANK;
		}
		else {
			return _languagename;
		}
	}

	public void setLanguagename(String languagename) {
		_languagename = languagename;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			assessment_lang_lkp.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public assessment_lang_lkp toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (assessment_lang_lkp)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		assessment_lang_lkpImpl assessment_lang_lkpImpl = new assessment_lang_lkpImpl();

		assessment_lang_lkpImpl.setLanguageid(getLanguageid());
		assessment_lang_lkpImpl.setLanguagecode(getLanguagecode());
		assessment_lang_lkpImpl.setLanguagename(getLanguagename());

		assessment_lang_lkpImpl.resetOriginalValues();

		return assessment_lang_lkpImpl;
	}

	public int compareTo(assessment_lang_lkp assessment_lang_lkp) {
		long primaryKey = assessment_lang_lkp.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		assessment_lang_lkp assessment_lang_lkp = null;

		try {
			assessment_lang_lkp = (assessment_lang_lkp)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = assessment_lang_lkp.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<assessment_lang_lkp> toCacheModel() {
		assessment_lang_lkpCacheModel assessment_lang_lkpCacheModel = new assessment_lang_lkpCacheModel();

		assessment_lang_lkpCacheModel.languageid = getLanguageid();

		assessment_lang_lkpCacheModel.languagecode = getLanguagecode();

		String languagecode = assessment_lang_lkpCacheModel.languagecode;

		if ((languagecode != null) && (languagecode.length() == 0)) {
			assessment_lang_lkpCacheModel.languagecode = null;
		}

		assessment_lang_lkpCacheModel.languagename = getLanguagename();

		String languagename = assessment_lang_lkpCacheModel.languagename;

		if ((languagename != null) && (languagename.length() == 0)) {
			assessment_lang_lkpCacheModel.languagename = null;
		}

		return assessment_lang_lkpCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{languageid=");
		sb.append(getLanguageid());
		sb.append(", languagecode=");
		sb.append(getLanguagecode());
		sb.append(", languagename=");
		sb.append(getLanguagename());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.iucn.whp.dbservice.model.assessment_lang_lkp");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>languageid</column-name><column-value><![CDATA[");
		sb.append(getLanguageid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>languagecode</column-name><column-value><![CDATA[");
		sb.append(getLanguagecode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>languagename</column-name><column-value><![CDATA[");
		sb.append(getLanguagename());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = assessment_lang_lkp.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			assessment_lang_lkp.class
		};
	private long _languageid;
	private String _languagecode;
	private String _languagename;
	private assessment_lang_lkp _escapedModelProxy;
}