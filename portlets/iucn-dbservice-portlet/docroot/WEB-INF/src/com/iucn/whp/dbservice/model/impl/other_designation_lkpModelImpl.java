/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.iucn.whp.dbservice.model.impl;

import com.iucn.whp.dbservice.model.other_designation_lkp;
import com.iucn.whp.dbservice.model.other_designation_lkpModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the other_designation_lkp service. Represents a row in the &quot;whp_other_designation_lkp&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.iucn.whp.dbservice.model.other_designation_lkpModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link other_designation_lkpImpl}.
 * </p>
 *
 * @author alok.sen
 * @see other_designation_lkpImpl
 * @see com.iucn.whp.dbservice.model.other_designation_lkp
 * @see com.iucn.whp.dbservice.model.other_designation_lkpModel
 * @generated
 */
public class other_designation_lkpModelImpl extends BaseModelImpl<other_designation_lkp>
	implements other_designation_lkpModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a other_designation_lkp model instance should use the {@link com.iucn.whp.dbservice.model.other_designation_lkp} interface instead.
	 */
	public static final String TABLE_NAME = "whp_other_designation_lkp";
	public static final Object[][] TABLE_COLUMNS = {
			{ "other_designations_id", Types.INTEGER },
			{ "designation", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table whp_other_designation_lkp (other_designations_id INTEGER not null primary key,designation VARCHAR(100) null)";
	public static final String TABLE_SQL_DROP = "drop table whp_other_designation_lkp";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.iucn.whp.dbservice.model.other_designation_lkp"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.iucn.whp.dbservice.model.other_designation_lkp"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.iucn.whp.dbservice.model.other_designation_lkp"));

	public other_designation_lkpModelImpl() {
	}

	public int getPrimaryKey() {
		return _other_designations_id;
	}

	public void setPrimaryKey(int primaryKey) {
		setOther_designations_id(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Integer(_other_designations_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	public Class<?> getModelClass() {
		return other_designation_lkp.class;
	}

	public String getModelClassName() {
		return other_designation_lkp.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("other_designations_id", getOther_designations_id());
		attributes.put("designation", getDesignation());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer other_designations_id = (Integer)attributes.get(
				"other_designations_id");

		if (other_designations_id != null) {
			setOther_designations_id(other_designations_id);
		}

		String designation = (String)attributes.get("designation");

		if (designation != null) {
			setDesignation(designation);
		}
	}

	public int getOther_designations_id() {
		return _other_designations_id;
	}

	public void setOther_designations_id(int other_designations_id) {
		_other_designations_id = other_designations_id;
	}

	public String getDesignation() {
		if (_designation == null) {
			return StringPool.BLANK;
		}
		else {
			return _designation;
		}
	}

	public void setDesignation(String designation) {
		_designation = designation;
	}

	@Override
	public other_designation_lkp toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (other_designation_lkp)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		other_designation_lkpImpl other_designation_lkpImpl = new other_designation_lkpImpl();

		other_designation_lkpImpl.setOther_designations_id(getOther_designations_id());
		other_designation_lkpImpl.setDesignation(getDesignation());

		other_designation_lkpImpl.resetOriginalValues();

		return other_designation_lkpImpl;
	}

	public int compareTo(other_designation_lkp other_designation_lkp) {
		int primaryKey = other_designation_lkp.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		other_designation_lkp other_designation_lkp = null;

		try {
			other_designation_lkp = (other_designation_lkp)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		int primaryKey = other_designation_lkp.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<other_designation_lkp> toCacheModel() {
		other_designation_lkpCacheModel other_designation_lkpCacheModel = new other_designation_lkpCacheModel();

		other_designation_lkpCacheModel.other_designations_id = getOther_designations_id();

		other_designation_lkpCacheModel.designation = getDesignation();

		String designation = other_designation_lkpCacheModel.designation;

		if ((designation != null) && (designation.length() == 0)) {
			other_designation_lkpCacheModel.designation = null;
		}

		return other_designation_lkpCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{other_designations_id=");
		sb.append(getOther_designations_id());
		sb.append(", designation=");
		sb.append(getDesignation());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.iucn.whp.dbservice.model.other_designation_lkp");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>other_designations_id</column-name><column-value><![CDATA[");
		sb.append(getOther_designations_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>designation</column-name><column-value><![CDATA[");
		sb.append(getDesignation());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = other_designation_lkp.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			other_designation_lkp.class
		};
	private int _other_designations_id;
	private String _designation;
	private other_designation_lkp _escapedModelProxy;
}