/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.iucn.whp.dbservice.model.impl;

import com.iucn.whp.dbservice.model.references;
import com.iucn.whp.dbservice.model.referencesModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the references service. Represents a row in the &quot;whp_references&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.iucn.whp.dbservice.model.referencesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link referencesImpl}.
 * </p>
 *
 * @author alok.sen
 * @see referencesImpl
 * @see com.iucn.whp.dbservice.model.references
 * @see com.iucn.whp.dbservice.model.referencesModel
 * @generated
 */
public class referencesModelImpl extends BaseModelImpl<references>
	implements referencesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a references model instance should use the {@link com.iucn.whp.dbservice.model.references} interface instead.
	 */
	public static final String TABLE_NAME = "whp_references";
	public static final Object[][] TABLE_COLUMNS = {
			{ "reference_id", Types.BIGINT },
			{ "assessment_version_id", Types.BIGINT },
			{ "rn", Types.BIGINT },
			{ "references_", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table whp_references (reference_id LONG not null primary key,assessment_version_id LONG,rn LONG,references_ STRING null)";
	public static final String TABLE_SQL_DROP = "drop table whp_references";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.iucn.whp.dbservice.model.references"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.iucn.whp.dbservice.model.references"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.iucn.whp.dbservice.model.references"),
			true);
	public static long ASSESSMENT_VERSION_ID_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.iucn.whp.dbservice.model.references"));

	public referencesModelImpl() {
	}

	public long getPrimaryKey() {
		return _reference_id;
	}

	public void setPrimaryKey(long primaryKey) {
		setReference_id(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_reference_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return references.class;
	}

	public String getModelClassName() {
		return references.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("reference_id", getReference_id());
		attributes.put("assessment_version_id", getAssessment_version_id());
		attributes.put("rn", getRn());
		attributes.put("references", getReferences());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long reference_id = (Long)attributes.get("reference_id");

		if (reference_id != null) {
			setReference_id(reference_id);
		}

		Long assessment_version_id = (Long)attributes.get(
				"assessment_version_id");

		if (assessment_version_id != null) {
			setAssessment_version_id(assessment_version_id);
		}

		Long rn = (Long)attributes.get("rn");

		if (rn != null) {
			setRn(rn);
		}

		String references = (String)attributes.get("references");

		if (references != null) {
			setReferences(references);
		}
	}

	public long getReference_id() {
		return _reference_id;
	}

	public void setReference_id(long reference_id) {
		_reference_id = reference_id;
	}

	public long getAssessment_version_id() {
		return _assessment_version_id;
	}

	public void setAssessment_version_id(long assessment_version_id) {
		_columnBitmask |= ASSESSMENT_VERSION_ID_COLUMN_BITMASK;

		if (!_setOriginalAssessment_version_id) {
			_setOriginalAssessment_version_id = true;

			_originalAssessment_version_id = _assessment_version_id;
		}

		_assessment_version_id = assessment_version_id;
	}

	public long getOriginalAssessment_version_id() {
		return _originalAssessment_version_id;
	}

	public long getRn() {
		return _rn;
	}

	public void setRn(long rn) {
		_rn = rn;
	}

	public String getReferences() {
		if (_references == null) {
			return StringPool.BLANK;
		}
		else {
			return _references;
		}
	}

	public void setReferences(String references) {
		_references = references;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			references.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public references toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (references)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		referencesImpl referencesImpl = new referencesImpl();

		referencesImpl.setReference_id(getReference_id());
		referencesImpl.setAssessment_version_id(getAssessment_version_id());
		referencesImpl.setRn(getRn());
		referencesImpl.setReferences(getReferences());

		referencesImpl.resetOriginalValues();

		return referencesImpl;
	}

	public int compareTo(references references) {
		long primaryKey = references.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		references references = null;

		try {
			references = (references)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = references.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		referencesModelImpl referencesModelImpl = this;

		referencesModelImpl._originalAssessment_version_id = referencesModelImpl._assessment_version_id;

		referencesModelImpl._setOriginalAssessment_version_id = false;

		referencesModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<references> toCacheModel() {
		referencesCacheModel referencesCacheModel = new referencesCacheModel();

		referencesCacheModel.reference_id = getReference_id();

		referencesCacheModel.assessment_version_id = getAssessment_version_id();

		referencesCacheModel.rn = getRn();

		referencesCacheModel.references = getReferences();

		String references = referencesCacheModel.references;

		if ((references != null) && (references.length() == 0)) {
			referencesCacheModel.references = null;
		}

		return referencesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{reference_id=");
		sb.append(getReference_id());
		sb.append(", assessment_version_id=");
		sb.append(getAssessment_version_id());
		sb.append(", rn=");
		sb.append(getRn());
		sb.append(", references=");
		sb.append(getReferences());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.iucn.whp.dbservice.model.references");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>reference_id</column-name><column-value><![CDATA[");
		sb.append(getReference_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assessment_version_id</column-name><column-value><![CDATA[");
		sb.append(getAssessment_version_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rn</column-name><column-value><![CDATA[");
		sb.append(getRn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>references</column-name><column-value><![CDATA[");
		sb.append(getReferences());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = references.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			references.class
		};
	private long _reference_id;
	private long _assessment_version_id;
	private long _originalAssessment_version_id;
	private boolean _setOriginalAssessment_version_id;
	private long _rn;
	private String _references;
	private long _columnBitmask;
	private references _escapedModelProxy;
}