/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.iucn.whp.dbservice.model.impl;

import com.iucn.whp.dbservice.model.country_lkp;
import com.iucn.whp.dbservice.model.country_lkpModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the country_lkp service. Represents a row in the &quot;whp_country_lkp&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.iucn.whp.dbservice.model.country_lkpModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link country_lkpImpl}.
 * </p>
 *
 * @author alok.sen
 * @see country_lkpImpl
 * @see com.iucn.whp.dbservice.model.country_lkp
 * @see com.iucn.whp.dbservice.model.country_lkpModel
 * @generated
 */
public class country_lkpModelImpl extends BaseModelImpl<country_lkp>
	implements country_lkpModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a country_lkp model instance should use the {@link com.iucn.whp.dbservice.model.country_lkp} interface instead.
	 */
	public static final String TABLE_NAME = "whp_country_lkp";
	public static final Object[][] TABLE_COLUMNS = {
			{ "countryid", Types.INTEGER },
			{ "name", Types.VARCHAR },
			{ "a2", Types.VARCHAR },
			{ "a3", Types.VARCHAR },
			{ "number_", Types.VARCHAR },
			{ "idd_", Types.VARCHAR },
			{ "currency_", Types.VARCHAR },
			{ "ziprequired", Types.BOOLEAN },
			{ "active_", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table whp_country_lkp (countryid INTEGER not null primary key,name VARCHAR(75) null,a2 VARCHAR(75) null,a3 VARCHAR(75) null,number_ VARCHAR(75) null,idd_ VARCHAR(75) null,currency_ VARCHAR(75) null,ziprequired BOOLEAN,active_ BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table whp_country_lkp";
	public static final String ORDER_BY_JPQL = " ORDER BY country_lkp.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY whp_country_lkp.name ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.iucn.whp.dbservice.model.country_lkp"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.iucn.whp.dbservice.model.country_lkp"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.iucn.whp.dbservice.model.country_lkp"),
			true);
	public static long A2_COLUMN_BITMASK = 1L;
	public static long A3_COLUMN_BITMASK = 2L;
	public static long NAME_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.iucn.whp.dbservice.model.country_lkp"));

	public country_lkpModelImpl() {
	}

	public int getPrimaryKey() {
		return _countryid;
	}

	public void setPrimaryKey(int primaryKey) {
		setCountryid(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Integer(_countryid);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	public Class<?> getModelClass() {
		return country_lkp.class;
	}

	public String getModelClassName() {
		return country_lkp.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("countryid", getCountryid());
		attributes.put("name", getName());
		attributes.put("a2", getA2());
		attributes.put("a3", getA3());
		attributes.put("number", getNumber());
		attributes.put("idd", getIdd());
		attributes.put("currency", getCurrency());
		attributes.put("ziprequired", getZiprequired());
		attributes.put("active", getActive());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer countryid = (Integer)attributes.get("countryid");

		if (countryid != null) {
			setCountryid(countryid);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String a2 = (String)attributes.get("a2");

		if (a2 != null) {
			setA2(a2);
		}

		String a3 = (String)attributes.get("a3");

		if (a3 != null) {
			setA3(a3);
		}

		String number = (String)attributes.get("number");

		if (number != null) {
			setNumber(number);
		}

		String idd = (String)attributes.get("idd");

		if (idd != null) {
			setIdd(idd);
		}

		String currency = (String)attributes.get("currency");

		if (currency != null) {
			setCurrency(currency);
		}

		Boolean ziprequired = (Boolean)attributes.get("ziprequired");

		if (ziprequired != null) {
			setZiprequired(ziprequired);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}
	}

	public int getCountryid() {
		return _countryid;
	}

	public void setCountryid(int countryid) {
		_countryid = countryid;
	}

	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_columnBitmask = -1L;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	public String getA2() {
		if (_a2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _a2;
		}
	}

	public void setA2(String a2) {
		_columnBitmask |= A2_COLUMN_BITMASK;

		if (_originalA2 == null) {
			_originalA2 = _a2;
		}

		_a2 = a2;
	}

	public String getOriginalA2() {
		return GetterUtil.getString(_originalA2);
	}

	public String getA3() {
		if (_a3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _a3;
		}
	}

	public void setA3(String a3) {
		_columnBitmask |= A3_COLUMN_BITMASK;

		if (_originalA3 == null) {
			_originalA3 = _a3;
		}

		_a3 = a3;
	}

	public String getOriginalA3() {
		return GetterUtil.getString(_originalA3);
	}

	public String getNumber() {
		if (_number == null) {
			return StringPool.BLANK;
		}
		else {
			return _number;
		}
	}

	public void setNumber(String number) {
		_number = number;
	}

	public String getIdd() {
		if (_idd == null) {
			return StringPool.BLANK;
		}
		else {
			return _idd;
		}
	}

	public void setIdd(String idd) {
		_idd = idd;
	}

	public String getCurrency() {
		if (_currency == null) {
			return StringPool.BLANK;
		}
		else {
			return _currency;
		}
	}

	public void setCurrency(String currency) {
		_currency = currency;
	}

	public boolean getZiprequired() {
		return _ziprequired;
	}

	public boolean isZiprequired() {
		return _ziprequired;
	}

	public void setZiprequired(boolean ziprequired) {
		_ziprequired = ziprequired;
	}

	public boolean getActive() {
		return _active;
	}

	public boolean isActive() {
		return _active;
	}

	public void setActive(boolean active) {
		_active = active;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public country_lkp toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (country_lkp)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		country_lkpImpl country_lkpImpl = new country_lkpImpl();

		country_lkpImpl.setCountryid(getCountryid());
		country_lkpImpl.setName(getName());
		country_lkpImpl.setA2(getA2());
		country_lkpImpl.setA3(getA3());
		country_lkpImpl.setNumber(getNumber());
		country_lkpImpl.setIdd(getIdd());
		country_lkpImpl.setCurrency(getCurrency());
		country_lkpImpl.setZiprequired(getZiprequired());
		country_lkpImpl.setActive(getActive());

		country_lkpImpl.resetOriginalValues();

		return country_lkpImpl;
	}

	public int compareTo(country_lkp country_lkp) {
		int value = 0;

		value = getName().compareTo(country_lkp.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		country_lkp country_lkp = null;

		try {
			country_lkp = (country_lkp)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		int primaryKey = country_lkp.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		country_lkpModelImpl country_lkpModelImpl = this;

		country_lkpModelImpl._originalName = country_lkpModelImpl._name;

		country_lkpModelImpl._originalA2 = country_lkpModelImpl._a2;

		country_lkpModelImpl._originalA3 = country_lkpModelImpl._a3;

		country_lkpModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<country_lkp> toCacheModel() {
		country_lkpCacheModel country_lkpCacheModel = new country_lkpCacheModel();

		country_lkpCacheModel.countryid = getCountryid();

		country_lkpCacheModel.name = getName();

		String name = country_lkpCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			country_lkpCacheModel.name = null;
		}

		country_lkpCacheModel.a2 = getA2();

		String a2 = country_lkpCacheModel.a2;

		if ((a2 != null) && (a2.length() == 0)) {
			country_lkpCacheModel.a2 = null;
		}

		country_lkpCacheModel.a3 = getA3();

		String a3 = country_lkpCacheModel.a3;

		if ((a3 != null) && (a3.length() == 0)) {
			country_lkpCacheModel.a3 = null;
		}

		country_lkpCacheModel.number = getNumber();

		String number = country_lkpCacheModel.number;

		if ((number != null) && (number.length() == 0)) {
			country_lkpCacheModel.number = null;
		}

		country_lkpCacheModel.idd = getIdd();

		String idd = country_lkpCacheModel.idd;

		if ((idd != null) && (idd.length() == 0)) {
			country_lkpCacheModel.idd = null;
		}

		country_lkpCacheModel.currency = getCurrency();

		String currency = country_lkpCacheModel.currency;

		if ((currency != null) && (currency.length() == 0)) {
			country_lkpCacheModel.currency = null;
		}

		country_lkpCacheModel.ziprequired = getZiprequired();

		country_lkpCacheModel.active = getActive();

		return country_lkpCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{countryid=");
		sb.append(getCountryid());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", a2=");
		sb.append(getA2());
		sb.append(", a3=");
		sb.append(getA3());
		sb.append(", number=");
		sb.append(getNumber());
		sb.append(", idd=");
		sb.append(getIdd());
		sb.append(", currency=");
		sb.append(getCurrency());
		sb.append(", ziprequired=");
		sb.append(getZiprequired());
		sb.append(", active=");
		sb.append(getActive());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.iucn.whp.dbservice.model.country_lkp");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>countryid</column-name><column-value><![CDATA[");
		sb.append(getCountryid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>a2</column-name><column-value><![CDATA[");
		sb.append(getA2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>a3</column-name><column-value><![CDATA[");
		sb.append(getA3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>number</column-name><column-value><![CDATA[");
		sb.append(getNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idd</column-name><column-value><![CDATA[");
		sb.append(getIdd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currency</column-name><column-value><![CDATA[");
		sb.append(getCurrency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ziprequired</column-name><column-value><![CDATA[");
		sb.append(getZiprequired());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = country_lkp.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			country_lkp.class
		};
	private int _countryid;
	private String _name;
	private String _originalName;
	private String _a2;
	private String _originalA2;
	private String _a3;
	private String _originalA3;
	private String _number;
	private String _idd;
	private String _currency;
	private boolean _ziprequired;
	private boolean _active;
	private long _columnBitmask;
	private country_lkp _escapedModelProxy;
}