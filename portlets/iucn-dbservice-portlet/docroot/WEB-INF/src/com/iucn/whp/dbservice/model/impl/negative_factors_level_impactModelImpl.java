/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.iucn.whp.dbservice.model.impl;

import com.iucn.whp.dbservice.model.negative_factors_level_impact;
import com.iucn.whp.dbservice.model.negative_factors_level_impactModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the negative_factors_level_impact service. Represents a row in the &quot;whp_negative_factors_level_impact&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.iucn.whp.dbservice.model.negative_factors_level_impactModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link negative_factors_level_impactImpl}.
 * </p>
 *
 * @author alok.sen
 * @see negative_factors_level_impactImpl
 * @see com.iucn.whp.dbservice.model.negative_factors_level_impact
 * @see com.iucn.whp.dbservice.model.negative_factors_level_impactModel
 * @generated
 */
public class negative_factors_level_impactModelImpl extends BaseModelImpl<negative_factors_level_impact>
	implements negative_factors_level_impactModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a negative_factors_level_impact model instance should use the {@link com.iucn.whp.dbservice.model.negative_factors_level_impact} interface instead.
	 */
	public static final String TABLE_NAME = "whp_negative_factors_level_impact";
	public static final Object[][] TABLE_COLUMNS = {
			{ "level_id", Types.BIGINT },
			{ "level_impact", Types.VARCHAR },
			{ "description", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table whp_negative_factors_level_impact (level_id LONG not null primary key,level_impact VARCHAR(75) null,description VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table whp_negative_factors_level_impact";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.iucn.whp.dbservice.model.negative_factors_level_impact"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.iucn.whp.dbservice.model.negative_factors_level_impact"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.iucn.whp.dbservice.model.negative_factors_level_impact"));

	public negative_factors_level_impactModelImpl() {
	}

	public long getPrimaryKey() {
		return _level_id;
	}

	public void setPrimaryKey(long primaryKey) {
		setLevel_id(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_level_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return negative_factors_level_impact.class;
	}

	public String getModelClassName() {
		return negative_factors_level_impact.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("level_id", getLevel_id());
		attributes.put("level_impact", getLevel_impact());
		attributes.put("description", getDescription());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long level_id = (Long)attributes.get("level_id");

		if (level_id != null) {
			setLevel_id(level_id);
		}

		String level_impact = (String)attributes.get("level_impact");

		if (level_impact != null) {
			setLevel_impact(level_impact);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	public long getLevel_id() {
		return _level_id;
	}

	public void setLevel_id(long level_id) {
		_level_id = level_id;
	}

	public String getLevel_impact() {
		if (_level_impact == null) {
			return StringPool.BLANK;
		}
		else {
			return _level_impact;
		}
	}

	public void setLevel_impact(String level_impact) {
		_level_impact = level_impact;
	}

	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			negative_factors_level_impact.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public negative_factors_level_impact toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (negative_factors_level_impact)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		negative_factors_level_impactImpl negative_factors_level_impactImpl = new negative_factors_level_impactImpl();

		negative_factors_level_impactImpl.setLevel_id(getLevel_id());
		negative_factors_level_impactImpl.setLevel_impact(getLevel_impact());
		negative_factors_level_impactImpl.setDescription(getDescription());

		negative_factors_level_impactImpl.resetOriginalValues();

		return negative_factors_level_impactImpl;
	}

	public int compareTo(
		negative_factors_level_impact negative_factors_level_impact) {
		long primaryKey = negative_factors_level_impact.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		negative_factors_level_impact negative_factors_level_impact = null;

		try {
			negative_factors_level_impact = (negative_factors_level_impact)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = negative_factors_level_impact.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<negative_factors_level_impact> toCacheModel() {
		negative_factors_level_impactCacheModel negative_factors_level_impactCacheModel =
			new negative_factors_level_impactCacheModel();

		negative_factors_level_impactCacheModel.level_id = getLevel_id();

		negative_factors_level_impactCacheModel.level_impact = getLevel_impact();

		String level_impact = negative_factors_level_impactCacheModel.level_impact;

		if ((level_impact != null) && (level_impact.length() == 0)) {
			negative_factors_level_impactCacheModel.level_impact = null;
		}

		negative_factors_level_impactCacheModel.description = getDescription();

		String description = negative_factors_level_impactCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			negative_factors_level_impactCacheModel.description = null;
		}

		return negative_factors_level_impactCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{level_id=");
		sb.append(getLevel_id());
		sb.append(", level_impact=");
		sb.append(getLevel_impact());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.iucn.whp.dbservice.model.negative_factors_level_impact");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>level_id</column-name><column-value><![CDATA[");
		sb.append(getLevel_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>level_impact</column-name><column-value><![CDATA[");
		sb.append(getLevel_impact());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = negative_factors_level_impact.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			negative_factors_level_impact.class
		};
	private long _level_id;
	private String _level_impact;
	private String _description;
	private negative_factors_level_impact _escapedModelProxy;
}